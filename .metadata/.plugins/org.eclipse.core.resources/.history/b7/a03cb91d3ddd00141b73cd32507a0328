package aiproject.game;

import java.awt.Graphics;

import aiproject.Config;

public abstract class GraphicObject {
	private int x, y, width, height;
	private double velocity;
	private boolean moving;

	public abstract GraphicObject(int x, int y, int width, int height, boolean moving) {
		super();
		this.moving = moving;
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		if (moving) {
			new Thread(new Runnable() {

				@Override
				public void run() {
					int originalX = getX(), originalY = getY();
					while (true) {
						int deltaX = getX() - originalX;
						int deltaY = getY() - originalY;

						int sign;
						if (deltaX == 0) {
							sign = deltaY == 0 ? 0 : deltaY / Math.abs(deltaY);
						} else if (deltaY == 0) {
							sign = deltaX / Math.abs(deltaX);
						} else {
							sign = deltaX / Math.abs(deltaX) * deltaY
									/ Math.abs(deltaY);
						}

						double distanceTraveled = Math.sqrt(Math.pow(deltaX, 2)
								+ Math.pow(deltaY, 2));
						setVelocity((double) distanceTraveled
								/ (double) Config.VELOCITY_SLEEP_AMOUNT * sign);
						originalX = getX();
						originalY = getY();
						try {
							Thread.sleep(Config.VELOCITY_SLEEP_AMOUNT);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}

			}).start();
		}
	}

	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}

	public int getWidth() {
		return width;
	}

	public void setWidth(int width) {
		this.width = width;
	}

	public int getHeight() {
		return height;
	}

	public void setHeight(int height) {
		this.height = height;
	}

	public boolean isInside(int x, int y) {
		return ((this.y <= y && this.y + height >= y) && (this.x <= x && this.x
				+ width >= x));
	}

	public boolean isInside(GraphicObject other) {
		return isInside(other.x, other.y)
				|| isInside(other.x + other.width, other.y)
				|| isInside(other.x, other.y + other.height)
				|| isInside(other.x + other.width, other.y + other.height);

	}

	private void setVelocity(double velocity) {
		this.velocity = moving ? velocity : 0;
	}

	public double getVelocity() {
		return velocity;
	}

	public abstract boolean draw(Graphics gr);
}
